# Proposed Project Directory Structure

The `btcmesh` project will be organized within the `lora/` directory as follows:

```
lora/
└── btcmesh/
    ├── btcmesh_cli.py         # Client script for sending transactions
    ├── btcmesh_server.py      # Server/Relay script for processing transactions
    ├── core/                  # Core logic for the server/relay
    │   ├── __init__.py
    │   ├── config_loader.py   # For loading config.ini
    │   ├── logger_setup.py    # For setting up consistent logging
    │   ├── transaction_parser.py # For decoding raw Bitcoin transactions
    │   ├── rpc_client.py      # For interacting with Bitcoin RPC
    │   └── reassembler.py     # For reassembling chunked messages
    ├── project/               # Project planning documents (this file, reference_materials.md)
    │   ├── tasks.txt
    │   └── reference_materials.md
    ├── logs/                  # Directory for log files (created at runtime)
    │   └── btcmesh_server.log
    │   └── btcmesh_cli.log    # If btcmesh_cli.py also implements file logging
    ├── tests/                 # Unit and integration tests
    │   ├── __init__.py
    │   ├── test_config_loader.py
    │   ├── test_transaction_parser.py
    │   ├── test_rpc_client.py
    │   ├── test_reassembler.py
    │   ├── test_btcmesh_cli.py
    │   └── test_btcmesh_server.py
    ├── config.ini.example     # Example configuration file for the server
    └── README.md              # Project README describing setup, usage, etc.
```

# Raw Transaction example
02000000000108bf2c7da5efaf2708170ffbafde7b2b0ca68234474ea71d443aee6aebfbf998030000000000fdffffffd6fcdbf37f974be27e8b0d66638355e5f53bfaf7b930fae035d23b313c4751042900000000fdffffffcccc5ca913b8eb426fd7c6bb578eab0f26583d40c51ce52cb12a428c1e75f7320100000000fdffffff981b8b54ad2a8bd8b59d063e9473aead87412b699cb969298cf29b8787fe10600000000000fdffffff5d154c445b35a92aaf179c078cdab6310e69455cde650f128cbe85d92bab51600100000000fdffffff7d23c74a412ef33d5dd856d01933dd6a5453aee3539b12349febbf6c1ba157980100000000fdffffffc5c95ce2eac84fbd3db87bbbdb4cc0855088e891cc57b1f9e0684943a399aabf0000000000fdffffffb7ef5d8a55141068da0d7b5a712ad9bbe44c3b8b412d0df5b9bcad366d71c8f90500000000fdffffff01697c63030000000016001482ea8436a6318c989767a51ce33886d65faf59a10247304402203ec9cfb2b60a7b1df545493d1794fec0b8b6d8589f562f61c9aec6852775b54102205dfb34dcc9cc31110fdf4e4544c76e9a664cf29e8f1f9905771db386882527190121030e92cc6f0829ea8b91469c8aa7ca0660d66020d3e8baaece478905e0c30c1f770247304402204a3a6a7a5d4ff285b1ba4a3457dae8566a1616738f94e9eddcce6a75dbb831ef0220285c586f6463dcf68ccef59484b2d12bccd7d68a68b7092068e6cbfd96f04d88012102f48b8ab9a082a1cf94dcd7052ddea7d260b40cf01e83aa3df00f2266721ef420024730440220527c3eb66a06d697a078b2b2bdf9be52f9fe036b1e3422a0a150e151ff0cd25b0220268688d8d9a3dd24b9f846b1b2f1b1f1ed84443f0023e26fa1ac5f2c1f0626ac012103acc2fbe36c425eb49389e5896232ef90beda75531845cd726dfed5f60a1fedd10247304402202eee600a307d10fc4777e8143d3db8994a6e742d56d4e3ce67a21a1e5e509178022022ee1b1fee5d7ec8112a56b1c0ab2eef1be00907d384bbf10a7a9d2d27564fb5012103bd6876311fbf657af0c1c85e907c3adf8d5086d1b3cf2cd4805b40873d2cf3cd02473044022042dbc6204b70da1548456beef504d5e8d61349dd36913832060b35f61a360429022006940b48cff72f6476b8d4495126618766500f0868fb99ba40ab518934e9cc2b0121035aa46c0cf9b30a9edf20c65e5c39158aefbfdd2b7a049d146f42b7dc3163d1b50247304402207811bd5b127e8a693f20115f7f8b8b4dec6a4d5df32109b21e1252331778ac5202202ac727cc6c53287110fcd371845b5fcdba825cb9e60992cc01cffa8e2ee41701012102700455a96ddb63fdaf8fc3ad60d02b057f8e00ed512476d817150a22fd4495d90247304402202caf8f9c584fe1b5214dc2a67f42fe3b9fd7386b98807fc6bc273a2cf519769902201f9f7b407f92c7df84701e4259acb198ca19c5edbd860385caa6ca1316417c010121035bfcbb577fe3a3a805c78226c7e7c573053e85e6641243c8f435acde0e04668902473044022074d6273ed2c7f338c9db6a979f64f572a21e5a324eec4979dad77383b25263de02202635d0e21ddf4e46f5751d4d6117ad559f04b7a6d3d00f13dd784b82a902638e012103de05dcec6736d4e15dd88c5b34b638fee6cccfd8b260d53379a43be0b343617cd9540c00


# EPIC: Reliable Chunked Transaction Relay Protocol for LoRa/Meshtastic

**Goal:**
Ensure reliable, in-order, lossless transmission of large Bitcoin transactions over unreliable LoRa/Meshtastic links using a stop-and-wait ARQ protocol.

---

## Stories (Current/Ongoing)

### 8. Reliable Session-Based Chunk Transfer

- [x] **Story 8.1: Session Initialization (Client/Server)**
    - [x] *   **As a** client,
    - [x] *   **I want** to initiate a session with a unique session ID, total chunk count, and chunk size,
    - [x] *   **So that** the server can prepare to receive a new transaction in chunks.
        - [x] *   **Given** the client has a transaction to send,
        - [x] *   **When** it sends `BTC_SESSION_START|<session_id>|<total_chunks>|<chunk_size>` to the server,
        - [x] *   **Then** the server responds with `BTC_SESSION_ACK|<session_id>|READY|REQUEST_CHUNK|1`.

- [x] **Story 8.2: Server requests and receives chunk 1 from client, ACKs, and requests next chunk**
    - [x] *   **As a** server,
    - [x] *   **I want** to request chunk 1 after session initialization, receive it, ACK it, and request chunk 2,
    - [x] *   **So that** the client only sends the next chunk after the previous is received and processed.
        - [x] *   **Given** a session is initialized and the server has requested chunk 1,
        - [x] *   **When** the client sends `BTC_CHUNK|<session_id>|1/<total_chunks>|<hex_payload>`,
        - [x] *   **Then** the server responds with `BTC_CHUNK_ACK|<session_id>|1|OK|REQUEST_CHUNK|2` and is ready for the next chunk.

- [x] **Story 8.3: Timeout and Retries**
    - [x] *   **As a** client or server,
    - [x] *   **I want** to retry a message up to 3 times if no response is received within 30 seconds,
    - [x] *   **So that** transient losses do not cause session failure.
        - [x] *   **Given** a message is sent and not acknowledged within 30 seconds,
        - [x] *   **When** the sender retries up to 3 times,
        - [x] *   **Then** the session continues if a response is received, or aborts after 3 failures.

- [x] **Story 8.4: Session Abort**
    - [x] *   **As a** client or server,
    - [x] *   **I want** to abort a session with a reason,
    - [x] *   **So that** both sides can clean up and notify the user of failure.
        - [x] *   **Given** a session is active,
        - [x] *   **When** either side sends `BTC_SESSION_ABORT|<session_id>|<reason>`,
        - [x] *   **Then** the other side stops processing and logs the abort.
    *   _Note: All protocol and business logic tests for abort are passing._

- [x] **Story 8.5: Multiple Concurrent Sessions**
    - [x] *   **As a** server,
    - [x] *   **I want** to handle multiple concurrent sessions from different clients,
    - [x] *   **So that** multiple users can upload transactions in parallel.
        - [x] *   **Given** multiple clients initiate sessions with unique IDs,
        - [x] *   **When** the server receives messages,
        - [x] *   **Then** it tracks and processes each session independently.
    *   _Note: All protocol and business logic tests for concurrent sessions are passing._

- [x] **Story 8.6: Chunk Size and Payload Limit**
    - [x] *   **As a** client,
    - [x] *   **I want** to use a fixed chunk size of 170 bytes (hex payload),
    - [x] *   **So that** each message fits within the Meshtastic payload size limit.
        - [x] *   **Given** a transaction to send,
        - [x] *   **When** the client splits it into chunks,
        - [x] *   **Then** each chunk (including header) does not exceed the Meshtastic payload limit.
    *   _Note: All CLI and protocol tests for chunk size enforcement are passing in non-interactive mode._

- [x] **Story 8.7: ACK/NACK and Error Handling**
    - [x] *   **As a** server,
    - [x] *   **I want** to ACK valid chunks and NACK invalid or duplicate chunks,
    - [x] *   **So that** clients can retry or abort as needed.
        - [x] *   **Given** a valid chunk, **When** received, **Then** ACK is sent.
        - [x] *   **Given** an invalid or duplicate chunk, **When** received, **Then** NACK is sent with error details.
    *   _Note: All ACK/NACK and error handling protocol tests are passing._

- [ ] **Story 8.8: End-to-End Integration Test**
    - [ ] *   **As a** developer,
    - [ ] *   **I want** an end-to-end test covering the full chunked relay flow,
    - [ ] *   **So that** I can verify the protocol works in practice.

### 8A. CLI Stop-and-Wait ARQ Refactor

- [x] **Story 8A.1: Send Next Chunk Only After ACK/REQUEST_CHUNK**
    - [x] *   **As a** client,
    - [x] *   **I want** to send the next chunk only after receiving the correct ACK/REQUEST_CHUNK from the server,
    - [x] *   **So that** the protocol is reliable and in-order.
    *   _Note: CLI now passes the stop-and-wait ARQ test._

- [ ] **Story 8A.2: Handle NACKs and aborts, retrying or aborting as needed**
    - [ ] *   **As a** client,
    - [ ] *   **I want** to handle NACKs and aborts from the server, retrying or aborting as needed,
    - [ ] *   **So that** the client can recover from errors or abort cleanly.

- [ ] **Story 8A.3: Timeout and Retries on No ACK**
    - [ ] *   **As a** client,
    - [ ] *   **I want** to retry sending a chunk up to 3 times if no ACK is received within 30 seconds,
    - [ ] *   **So that** transient losses do not cause session failure.
        - [ ] *   **Given** a chunk is sent and not acknowledged within 30 seconds,
        - [ ] *   **When** the client retries up to 3 times,
        - [ ] *   **Then** the session continues if a response is received, or aborts after 3 failures.

- [ ] **Story 8A.4: User Feedback and Logging**
    - [ ] *   **As a** user,
    - [ ] *   **I want** clear feedback and logs for each chunk sent, ACK/NACK received, retries, and aborts,
    - [ ] *   **So that** I can understand the session progress and diagnose issues.

- [ ] **Story 8A.5: End-to-End Protocol Compliance Test Harness**
    - [ ] *   **As a** developer,
    - [ ] *   **I want** an end-to-end test harness for the CLI and server,
    - [ ] *   **So that** I can verify protocol compliance in real and simulated environments.